name: "Run Acceptance tests & Publish results"
description: "Run Acceptance tests with SerenityJS & Publish results to Netlify"

inputs:
  ENVIRONMENT_NAME:
    description: "Name of the environment where tests will run"
    required: true
  TESTS_COMMAND:
    description: 'command to run tests. For example npm run test-ci'
    required: false
    default: 'npm test'
  RELEASE_CODENAME:
    description: 'Codename for release'
    required: false
    default: 'ci'
  NETLIFY_AUTH_TOKEN:
    description: "Netlify's PAT, see https://github.com/nwtgck/actions-netlify#optional-inputs"
    required: true
  NETLIFY_SITE_ID:
    description: "API ID from your site in Netlify"
    required: true
  SLACK_WEBHOOK_QA:
    description: "Slack's webhook"
    required: false
  CUSTOM_IMAGE:
    description: "Additional image for Slack's notification"
    required: false
    default: 'https://cdn-icons-png.flaticon.com/512/1581/1581884.png' #<a href="https://www.flaticon.es/iconos-gratis/examen" title="examen iconos">Examen iconos creados por Freepik - Flaticon</a>
  TESTS_SRC_DIR:
    description: "Directory where the tests src is"
    required: false
    default: './acceptance'
  AWS_GH_ACTIONS_ACCESS_KEY_ID:
    description: 'The AWS key id'
    required: true
  AWS_GH_ACTIONS_SECRET_ACCESS_KEY:
    description: 'The AWS access key'
    required: true
    
#TODO: since continue-on-error is not supported on composite actions, lines using it are commented
runs:
  using: "composite"
  steps:

    - name: Set env variables for ${{ inputs.ENVIRONMENT_NAME }}
      id: setEnvs
      shell: bash
      run: |
        echo selected env: ${{ inputs.ENVIRONMENT_NAME }}
        case ${{ inputs.ENVIRONMENT_NAME }} in
        (prod|prod-beta|prod-demo)
          echo "AWS_TESTS_EXECUTOR_ROLE=arn:aws:iam::694122753980:role/machine/ht-prod-ent0-euw1-ent0-machine-tests-executor" >> $GITHUB_OUTPUT
        ;;
        (ci|qa-int|qa-int-beta)
          echo "AWS_TESTS_EXECUTOR_ROLE=arn:aws:iam::319689072149:role/machine/ht-qa-test-euw1-int-machine-tests-executor" >> $GITHUB_OUTPUT
        ;;
        (dev)
          echo "AWS_TESTS_EXECUTOR_ROLE=arn:aws:iam::246199412647:role/machine/ht-dev-dev-euw1-dev-machine-tests-executor" >> $GITHUB_OUTPUT
          ;;
        (dev2)
          echo "AWS_TESTS_EXECUTOR_ROLE=arn:aws:iam::246199412647:role/machine/ht-dev-dev-euw1-dev2-machine-tests-executor" >> $GITHUB_OUTPUT
          ;;
        (*)
          echo -n "No env vars found for ${{ inputs.ENVIRONMENT_NAME }}! Aborting deployment"
          exit 1
          ;;
        esac

    - name: Setup Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: "16"
        cache: 'npm'
        cache-dependency-path: 'acceptance/package-lock.json'

    - name: Install project dependencies
      working-directory: ${{ inputs.TESTS_SRC_DIR }}
      run: npm ci
      shell: bash

    - name: Configure AWS Credentials to read env
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.AWS_GH_ACTIONS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_GH_ACTIONS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
        role-to-assume: ${{ steps.setEnvs.outputs.AWS_TESTS_EXECUTOR_ROLE }}
        role-duration-seconds: 900
        role-session-name: acceptance-tests

    - name: build .env.${{ inputs.ENVIRONMENT_NAME }} file
      working-directory: ${{ inputs.TESTS_SRC_DIR }}
      shell: bash
      run: bash generate-dotenv.sh ${{ inputs.ENVIRONMENT_NAME }}

    - name: Run tests
      id: acceptance-tests
      working-directory: ${{ inputs.TESTS_SRC_DIR }}
      run: echo "TESTS_STATUS=success" >> $GITHUB_ENV && export NODE_ENV=${{ inputs.ENVIRONMENT_NAME }} && ${{ inputs.TESTS_COMMAND }} || echo "TESTS_STATUS=failure" >> $GITHUB_ENV
      shell: bash

    - name: Generate partial test report #we only generate report if it does not exist
      if: always() && hashFiles('acceptance/target/site/serenity/index.html') == '' 
      working-directory: ${{ inputs.TESTS_SRC_DIR }}
      run: npm run test:report
      shell: bash

    - name: Deploy to Netlify
      id: publish-report
      uses: nwtgck/actions-netlify@v2
      if: always() && hashFiles('acceptance/target/site/serenity/index.html') != ''
      with:
        publish-dir: "./acceptance/target/site/serenity/"
        #production-branch: master #we will use deploy-preview approach
        deploy-message: Deploy Serenity reports for ${{ inputs.RELEASE_CODENAME }} release
        enable-pull-request-comment: false
        github-deployment-environment: ${{ inputs.ENVIRONMENT_NAME }}
        alias: deploy-preview-${{ inputs.RELEASE_CODENAME }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ inputs.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ inputs.NETLIFY_SITE_ID }}

    - name: Read tests summary
      id: tests-summary
      if: inputs.SLACK_WEBHOOK_QA!='' && hashFiles('acceptance/target/site/serenity/summary.txt') != '' && always()
      uses: juliangruber/read-file-action@v1
      continue-on-error: true
      with:
        path: "acceptance/target/site/serenity/summary.txt"

    - name: Move test results to tmp dir
      working-directory: ./acceptance/target
      run: mkdir -p /tmp/${{github.run_id}}/target/site/serenity && mv *.xml /tmp/${{github.run_id}}/target
      shell: bash

    - name: Move serenity files to tmp dir
      working-directory: ./acceptance/target/site/serenity 
      run:  mv *.* /tmp/${{github.run_id}}/target/site/serenity
      shell: bash

########### Optional Slack notification

        
    - name: Set slack icon
      id: setIcon
      if: inputs.SLACK_WEBHOOK_QA!='' && always()
      run: |
        if [ ${{env.TESTS_STATUS}} = "success" ]; then
          echo "SLACK_ICON=white_check_mark" >> $GITHUB_OUTPUT
        else
          echo "SLACK_ICON=warning" >> $GITHUB_OUTPUT
        fi
      shell: bash

      #App message. See https://app.slack.com/block-kit-builder
    - name: Send after-test Slack notification
      id: slack-after-test
      if: inputs.SLACK_WEBHOOK_QA!='' && always()
      uses: slackapi/slack-github-action@v1
      with:
        payload: |
          {
          "text": "Test results",
          "icon_emoji": ":${{steps.setIcon.outputs.SLACK_ICON}}:",
          "channel": "logging-${{inputs.ENVIRONMENT_NAME}}" ,
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": ":${{steps.setIcon.outputs.SLACK_ICON}}: Acceptance tests for ${{inputs.RELEASE_CODENAME}} in ${{inputs.ENVIRONMENT_NAME}} have finished with ${{env.TESTS_STATUS}}!"
              }
            },
            {
            "type": "context",
            "elements": [
              {
                "type": "image",
                "image_url": "${{inputs.CUSTOM_IMAGE}}",
                "alt_text": "tests icon"
              },
              {
                "type": "plain_text",
                "text": "Tests",
                "emoji": true
              }
            ]
          },
            {
              "type": "section",
              "text": {
                "type": "plain_text",
                "text": ${{ toJSON(steps.tests-summary.outputs.content) }}
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "<${{ steps.publish-report.outputs.deploy-url }}|Check out full results>"
              }
            },
            {
            "type": "divider"
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "PR/commit: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "Action run: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
              }
            }
          ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.SLACK_WEBHOOK_QA }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Fail the build if any test has failed
      if: env.TESTS_STATUS != 'success'
      uses: actions/github-script@v6
      with:
        script: |
          core.setFailed('Some tests failed!')

branding:
  icon: 'check-circle'
  color: 'green'